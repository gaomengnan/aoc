#+title: Recamans sequence
*** Desc
Given an integer n, return the first n elements of Recaman’s sequence.
It is a function with domain and co-domain as whole numbers. It is recursively defined as below:
Specifically, let a(n) denote the (n+1)th term. (0 being the 1st term).
The rule says:
a(0) = 0
a(n) = a(n-1) - n, if a(n-1) - n > 0 and is not included in the sequence previously
       =  a(n-1) + n otherwise.


**** Examples

#+begin_example
Input:
n = 5
Output:
0 1 3 6 2
Explaination:
a(0) = 0,
a(1) = a(0)-1 = 0-1 = -1 and -1<0, therefore a(1) = a(0)+1 = 1,
a(2) = a(1)-2 = 1-2 = -1 and -1<0, therefore a(2) = a(1)+2 = 3,
a(3) = a(2)-3 = 3-3 = 0 but since 0 is already present in the sequence, a(3) = a(2)+3 = 3+3 = 6,
a(4) = a(3)-4 = 6-4 = 2.
Therefore the first 5 elements of Recaman's sequence will be 0 1 3 6 2.
#+end_example

*** Approach
1. 根据题意计算 使用set判断是否已经产生相同的
#+begin_src c
#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <print>
using namespace std;

class Solution {
public:
  vector<int> recamanSequence(int n) {
    unordered_set<int> mpset;
    vector<int> res;
    res.push_back(0);
    mpset.insert(0);
    for (int i = 1; i < n; i++) {
      // 先当前val - 当前index
      int f = res[i-1] - i;

      if (f < 0 || mpset.find(f) != mpset.end()) {
        f = res[i-1] + i;
      }
      mpset.insert(f);
      res.push_back(f);
    }

    println("res is {}", res);

    return res;
  };
};

int main() {
  Solution sol;
  int n = 3;
  auto res = sol.recamanSequence(n);
  for (auto x : res) {
    cout << x << " ";
  }
  cout << endl;
  return 0;
}
#+end_src
