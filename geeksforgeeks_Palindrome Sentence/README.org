* Palindrome Sentence

Given a single string s, the task is to check if it is a palindrome sentence or not.
A palindrome sentence is a sequence of characters, such as word, phrase, or series of symbols that reads the same backward as forward after converting all uppercase letters to lowercase and removing all non-alphanumeric characters (including spaces and punctuation).

给定一个字符串 s，任务是检查它是否是一个回文句子。
回文句子是一个字符序列，如单词、短语或符号系列 ，它在转换所有大写字母为小写字母并移除所有非字母数字字符（包括空格和标点符号）后，正着读和反着读都相同。

** 问题描述

判断一个字符串是否为回文句子。回文句子是指在将所有大写字母转换为小写字母、并移除所有非字母数字字符之后，短语正着读和反着读都一样。

** 解题思路

使用双指针法：
1. 设置两个指针，一个从字符串开头(i=0)，一个从字符串末尾(j=n-1)
2. 跳过非字母数字字符
3. 比较对应位置字符（转换为小写后）是否相等
4. 如果所有对应字符都相等，则是回文句子

** 代码实现

#+begin_src python
class Solution:
    def isPalinSent(self, s):
        n = len(s)
        i = 0
        j = n - 1

        while i < j:
            if not s[i].isalnum():
                i += 1
                continue  # 跳过非字母数字字符
            if not s[j].isalnum():
                j -= 1
                continue  # 跳过非字母数字字符

            if s[i].lower() != s[j].lower():
                return False

            i += 1
            j -= 1

        return True
#+end_src

** 算法复杂度
- 时间复杂度：O(n)，其中 n 是字符串的长度
- 空间复杂度：O(1)

** 示例

#+begin_src python
# 测试用例
sol = Solution()

# 示例 1
s1 = "A man, a plan, a canal: Panama"
print(sol.isPalinSent(s1))  # 输出: True

# 示例 2
s2 = "race a car"
print(sol.isPalinSent(s2))  # 输出: False

# 示例 3
s3 = "i}w@(W|I"
print(sol.isPalinSent(s3))  # 输出: True
#+end_src

** 说明
- =isalnum()= 方法用于检查字符是否为字母或数字
- =lower()= 方法用于将字符转换为小写
- 使用 =continue= 语句跳过非字母数字字符，确保指针正确移动