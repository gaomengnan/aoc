#+title: Product array puzzle

*** Description
Given an array, arr[] construct a product array, res[] where each element in res[i] is the product of all elements in arr[] except arr[i]. Return this resultant array, res[].
Note: Each element is res[] lies inside the 32-bit integer range.

*** Examples

#+begin_example
Input: arr[] = [10, 3, 5, 6, 2]
Output: [180, 600, 360, 300, 900]
Explanation: For i=0, res[i] = 3 * 5 * 6 * 2 is 180.
For i = 1, res[i] = 10 * 5 * 6 * 2 is 600.
For i = 2, res[i] = 10 * 3 * 6 * 2 is 360.
For i = 3, res[i] = 10 * 3 * 5 * 2 is 300.
For i = 4, res[i] = 10 * 3 * 5 * 6 is 900.
#+end_example

*** Solution
1. 前缀乘

#+begin_src c
#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
  vector<int> productExceptSelf(vector<int> &arr) {
    int n = arr.size();
    vector<int> pres(n);
    vector<int> subs(n);
    pres[0] = arr[0];

    subs[n - 1] = arr[n - 1];

    for (int i = 1; i < n; i++) {
      pres[i] = arr[i] * pres[i - 1];
    }

    for (int i = n - 2; i >= 0; i--) {
      subs[i] = arr[i] * subs[i + 1];
    }

    // for (int num : pres) {
    //   cout << num << " ";
    // }
    // cout << endl;

    // for (int num : subs) {
    //   cout << num << " ";
    // }
    // cout << endl;

    vector<int> ans(n);

    for (int i = 0; i < n; i++) {
      if (i == 0) {
        ans[i] = subs[i + 1];
      } else if (i == n - 1) {
        ans[i] = pres[i - 1];
      } else {
        ans[i] = pres[i - 1] * subs[i + 1];
      }
    };
    return ans;
  }
};

int main() {
  Solution sol;
  vector<int> arr = {12, 0};
  vector<int> result = sol.productExceptSelf(arr);
  for (int num : result) {
    cout << num << " ";
  }
  cout << endl;
  return 0;
}
#+end_src
