* 总和大于 x 的最小子数组

**问题描述：**
给定一个数字 x 和一个整数数组 arr，找到和大于给定值的最小子数组。如果不存在这样的子数组，则返回 0。

** 示例：**
- 输入：x = 51, arr = [1, 4, 45, 6, 0, 19]
  输出：3
  解释：子数组 [4, 45, 6] 的和为 55 > 51，长度为 3

- 输入：x = 5, arr = [1, -2, 3, 4]
  输出：1
  解释：子数组 [4] 的和为 4 > 5？不对，应该是 [3, 4] 的和为 7 > 5，长度为 2

** 算法思路：**
使用滑动窗口（双指针）技术来高效解决这个问题：
1. 维护一个窗口 [k, i]，其中 k 是左指针，i 是右指针
2. 使用 pre_sum 变量记录当前窗口的和
3. 当当前元素加入窗口后和大于 x 时，尝试缩小窗口以找到更小的解
4. 记录满足条件的最小窗口长度

** 时间复杂度：** O(n)，其中 n 是数组长度
** 空间复杂度：** O(1)，只使用常数额外空间

** 文件结构：**
- main.py :: 主要算法实现
- test_smallest_subarray.py :: 完整的单元测试
- debug_test.py :: 调试测试文件

** 使用方法：**
#+BEGIN_SRC python
from main import Solution

solution = Solution()
result = solution.smallestSubWithSum(x, arr)
print(result)
#+END_SRC

#+RESULTS:

**运行测试：**
#+BEGIN_SRC bash
python test_smallest_subarray.py
#+END_SRC

** 测试覆盖：**
- 基本测试用例
- 单元素充分/不足情况
- 需要整个数组的情况
- 无解情况
- 空数组处理
- 正数数组测试
- 小目标值测试
- 重复元素测试
- 大数组测试
- 大数值测试
- 包含多个1的数组测试
- 连续解测试
- 末尾解测试
- 多解存在测试
- 精确和测试
- 极小数组测试
